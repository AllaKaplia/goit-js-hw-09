{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,OAAQC,SAASC,cAAc,UAGjCH,EAAKC,OAAOG,iBAAiB,SAQ7B,SAA0BC,GACD,UAApBA,EAAIC,OAAOC,OACZC,EAAYC,OAAOJ,EAAIC,OAAOI,QAGT,WAApBL,EAAIC,OAAOC,OACZI,EAAiBF,OAAOJ,EAAIC,OAAOI,QAGd,SAApBL,EAAIC,OAAOC,OACZK,EAAWH,OAAOJ,EAAIC,OAAOI,O,IAjBjCV,EAAKC,OAAOG,iBAAiB,UAqB7B,SAAyBC,GACvBA,EAAIQ,iBAIN,SAAsBC,EAAYC,EAAaC,GAC7C,IAAIC,EAAQH,EACRI,EAAI,EACR,KAAOA,GAAKH,GACVI,EAAcD,EAAGD,GAAOG,MAAMV,IAC5BW,EAAAvB,GAASwB,OAAOC,QAAQ,uBAAqBb,EAAIc,eAAmBd,EAAEO,UAAc,IACnFQ,OAAOf,IACRW,EAAAvB,GAASwB,OAAOI,QAAQ,sBAAoBhB,EAAEc,eAAmBd,EAAEO,UAAc,IAEnFA,GAASD,EACTE,GAAK,C,CAbPS,CAAanB,EAAWG,EAAgBC,E,IArB1C,IAAIJ,EAAY,EACZG,EAAiB,EACjBC,EAAW,EAqCf,SAASO,EAAcK,EAAUP,GAC/B,MAAMW,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAER,E,MAAUP,IAEpBgB,EAAO,C,SAAET,E,MAAUP,GAAQ,GAE5BA,EAAM,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  formEl: document.querySelector('.form'),\n}\n\nrefs.formEl.addEventListener('input', onFormInputValue);\nrefs.formEl.addEventListener('submit', onPromisesStart);\n\nlet delayTime = 0;\nlet amountQuantity = 0;\nlet stepTime = 0;\n\n\nfunction onFormInputValue(evt) {\n  if(evt.target.name === 'delay'){\n    delayTime = Number(evt.target.value);\n  }\n\n  if(evt.target.name === 'amount'){\n    amountQuantity = Number(evt.target.value);\n  }\n\n  if(evt.target.name === 'step'){\n    stepTime = Number(evt.target.value);\n  }\n};\n\nfunction onPromisesStart(evt) {\n  evt.preventDefault()\n  makePromises(delayTime, amountQuantity, stepTime)\n};\n\nfunction makePromises(delayValue, amountValue, stepValue) {\n  let delay = delayValue;\n  let i = 1;\n  while (i <= amountValue) {\n    createPromise(i, delay).then((value) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${value.position} in ${value.delay}ms`);\n    }).catch((value) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${value.position} in ${value.delay}ms`);\n    });\n    delay += stepValue;\n    i += 1;\n  }\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  \n  return new Promise((resolve, reject) => { \n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay })\n      } else {\n        reject({ position, delay })\n      }\n    }, delay);\n  });\n}"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$refs","formEl","document","querySelector","addEventListener","evt","target","name","$47d4ff9957288465$var$delayTime","Number","value","$47d4ff9957288465$var$amountQuantity","$47d4ff9957288465$var$stepTime","preventDefault","delayValue","amountValue","stepValue","delay","i","$47d4ff9957288465$var$createPromise","then","$parcel$interopDefault","Notify","success","position","catch","failure","$47d4ff9957288465$var$makePromises","shouldResolve","Math","random","Promise","resolve","reject","setTimeout"],"version":3,"file":"03-promises.3bedf111.js.map"}